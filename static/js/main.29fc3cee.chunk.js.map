{"version":3,"sources":["components/DataStore.js","reference/ChatUIReference.js","components/ChatAppUI.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["socket","makeStyles","table","minWidth","chatSection","width","height","headBG","backgroundColor","borderRight500","borderRight","messageArea","overflowY","Context","createContext","initState","general","astronomy","reducer","state","action","_action$payload","payload","from","msg","topic","type","console","log","list","push","sendChatAction","value","emit","DataStore","props","_useReducer","useReducer","_useReducer2","Object","slicedToArray","allChats","dispatch","_useState","useState","_useState2","user","changeUsername","io","on","react_default","a","createElement","Provider","children","useStyles","theme","root","padding","spacing","margin","flex","display","alignItems","selfmsg","float","topicsWindow","chatFlex","chatWindow","chatArea","chatBox","button","ChatApp","classes","_useContext","useContext","topics","keys","activeTopic","changeActiveTopic","_useState3","_useState4","textValue","changeTextValue","_useState5","_useState6","textLabel","changeTextLabel","Paper","className","List","map","ListItem","key","onClick","e","target","innerText","Avatar","preventDefault","src","ListItemText","primary","Typography","variant","component","chat","index","Chip","label","chip","TextField","id","onChange","onFocus","onBlur","Grid","color","alert","Fab","aria-label","Send_default","hidden","alignContent","top","input","Login","defineProperty","align","Button","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.29fc3cee.chunk.js","sourcesContent":["import React,{createContext,useReducer, useState} from 'react'\r\nimport io from 'socket.io-client'\r\n\r\nexport const Context = createContext();\r\n\r\nconst initState = {\r\n    // general : [ {from:\"pranavba99\",msg:\"Hello\"}, {from:\"aditya\",msg:\"Hi\"} ],\r\n    // astronomy : [ {from:\"bap\",msg:\"Astronomy\"}, {from:\"anonymous\",msg:\"Club\"} ]\r\n    general : [],\r\n    astronomy : []\r\n}\r\n\r\nfunction reducer(state, action) {\r\n    const {from, msg, topic} = action.payload;\r\n    switch(action.type){\r\n        case 'RECEIVE_MESSAGE':\r\n            console.log(action.payload)\r\n            var list = state[topic].push({from, msg })\r\n            console.log(list)\r\n            console.log(state)\r\n            return state;\r\n            // return {\r\n            //     ...state,\r\n            //     [topic]: [\r\n            //         ...state[topic],\r\n            //         {from, msg }\r\n            //     ]\r\n            // }\r\n        default: return state;\r\n    }\r\n    // const {from,msg,topic} = action.payload;\r\n    // switch(action.type){\r\n    //     case \"RECEIVE_MESSAGE\" :\r\n    //         console.log(action.payload)\r\n    //         var \r\n    //         // var newArr = this.state.arr;\r\n    //         // newArr.push('newvalue');\r\n    //         // this.setState({some:'val',arr:newArr})\r\n    //         return {\r\n                \r\n    //         }\r\n    //     default : return state;\r\n    // }\r\n}\r\n\r\nlet socket;\r\n\r\nfunction sendChatAction(value){\r\n    socket.emit('chat message', value);\r\n}\r\n\r\n// function changeUname(value){\r\n//     changeUsername(value);\r\n// }\r\n\r\n\r\nexport default function DataStore(props){\r\n    \r\n    const [allChats, dispatch] = useReducer( reducer, initState);\r\n    \r\n    const [user,changeUsername] = useState(\"Anonymous\");\r\n\r\n    \r\n    if(!socket){\r\n        socket=io(':3001');\r\n        socket.on('chat message', function(msg){\r\n            var message= {type:'RECEIVE_MESSAGE',payload:msg}\r\n            // console.log(message);\r\n            dispatch(message);\r\n        });\r\n    }\r\n\r\n    return ( \r\n        <Context.Provider value={{allChats, sendChatAction, user, changeUsername}}>\r\n            {props.children}\r\n        </Context.Provider>\r\n    )\r\n}\r\n\r\n{/* <CTX.Provider value={{user,changeUsername}}>\r\n                {props.children}\r\n            </CTX.Provider> */}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport SendIcon from '@material-ui/icons/Send';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  chatSection: {\r\n    width: '100%',\r\n    height: '80vh'\r\n  },\r\n  headBG: {\r\n      backgroundColor: '#e0e0e0'\r\n  },\r\n  borderRight500: {\r\n      borderRight: '1px solid #e0e0e0'\r\n  },\r\n  messageArea: {\r\n    height: '70vh',\r\n    overflowY: 'auto'\r\n  }\r\n});\r\n\r\nconst Chat = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n      <div>\r\n        <Grid container>\r\n            <Grid item xs={12} >\r\n                <Typography variant=\"h5\" className=\"header-message\">Chat</Typography>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid container component={Paper} className={classes.chatSection}>\r\n            <Grid item xs={3} className={classes.borderRight500}>\r\n                <List>\r\n                    <ListItem button key=\"RemySharp\">\r\n                        <ListItemIcon>\r\n                        <Avatar alt=\"Remy Sharp\" src=\"https://material-ui.com/static/images/avatar/1.jpg\" />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"John Wick\"></ListItemText>\r\n                    </ListItem>\r\n                </List>\r\n                <Divider />\r\n                <Grid item xs={12} style={{padding: '10px'}}>\r\n                    <TextField id=\"outlined-basic-email\" label=\"Search\" variant=\"outlined\" fullWidth />\r\n                </Grid>\r\n                <Divider />\r\n                <List>\r\n                    <ListItem button key=\"RemySharp\">\r\n                        <ListItemIcon>\r\n                            <Avatar alt=\"Remy Sharp\" src=\"https://material-ui.com/static/images/avatar/1.jpg\" />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Remy Sharp\">Remy Sharp</ListItemText>\r\n                        <ListItemText secondary=\"online\" align=\"right\"></ListItemText>\r\n                    </ListItem>\r\n                    <ListItem button key=\"Alice\">\r\n                        <ListItemIcon>\r\n                            <Avatar alt=\"Alice\" src=\"https://material-ui.com/static/images/avatar/3.jpg\" />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Alice\">Alice</ListItemText>\r\n                    </ListItem>\r\n                    <ListItem button key=\"CindyBaker\">\r\n                        <ListItemIcon>\r\n                            <Avatar alt=\"Cindy Baker\" src=\"https://material-ui.com/static/images/avatar/2.jpg\" />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Cindy Baker\">Cindy Baker</ListItemText>\r\n                    </ListItem>\r\n                </List>\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n                <List className={classes.messageArea}>\r\n                    <ListItem key=\"1\">\r\n                        <Grid container>\r\n                            <Grid item xs={12}>\r\n                                <ListItemText align=\"right\" primary=\"Hey man, What's up ?\"></ListItemText>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <ListItemText align=\"right\" secondary=\"09:30\"></ListItemText>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </ListItem>\r\n                    <ListItem key=\"2\">\r\n                        <Grid container>\r\n                            <Grid item xs={12}>\r\n                                <ListItemText align=\"left\" primary=\"Hey, Iam Good! What about you ?\"></ListItemText>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <ListItemText align=\"left\" secondary=\"09:31\"></ListItemText>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </ListItem>\r\n                    <ListItem key=\"3\">\r\n                        <Grid container>\r\n                            <Grid item xs={12}>\r\n                                <ListItemText align=\"right\" primary=\"Cool. i am good, let's catch up!\"></ListItemText>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <ListItemText align=\"right\" secondary=\"10:30\"></ListItemText>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </ListItem>\r\n                </List>\r\n                <Divider />\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <Grid item xs={11}>\r\n                        <TextField id=\"outlined-basic-email\" label=\"Type Something\" fullWidth />\r\n                    </Grid>\r\n                    <Grid xs={1} align=\"right\">\r\n                        <Fab color=\"primary\" aria-label=\"add\"><SendIcon /></Fab>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Chat;","import React, {useState, useContext} from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { Typography, Grid } from '@material-ui/core'\r\nimport { List, ListItem, ListItemText, ListItemIcon } from '@material-ui/core'\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Chip from '@material-ui/core/Chip'\r\nimport Button from '@material-ui/core/Button'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Fab from '@material-ui/core/Fab';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport {Context} from './DataStore'\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        padding: theme.spacing(3,2),\r\n        margin: \"50px\",\r\n        backgroundColor: \"#f2f2f2\"\r\n    },\r\n    flex: {\r\n        display:'flex',\r\n        alignItems: \"center\",\r\n    },\r\n    selfmsg: {\r\n        display:\"flex\",\r\n        alignItems:\"center\",\r\n        float:\"right\"\r\n    },\r\n    topicsWindow:{\r\n        width :\"30%\",\r\n        height :'300px',\r\n        borderRight: '1px solid grey',\r\n        overflowY: 'scroll'\r\n    },\r\n    chatFlex:{\r\n        width:\"70%\"\r\n    },\r\n    chatWindow:{\r\n        height :'300px',\r\n        padding :'10px',\r\n        overflowY:'scroll'\r\n    },\r\n    chatArea:{\r\n        padding:'10px'\r\n    },\r\n    chatBox:{\r\n        width :\"85%\",\r\n    },\r\n    button:{\r\n        width :\"15%\"\r\n    }\r\n}));\r\n\r\nexport default function ChatApp() {\r\n    const classes = useStyles();\r\n    \r\n    //Context\r\n    const {allChats, sendChatAction, user, changeUsername} = useContext(Context); \r\n    const topics = Object.keys(allChats);\r\n    \r\n    //Local\r\n    const [activeTopic, changeActiveTopic]=useState(topics[0]);\r\n    const [textValue, changeTextValue]=useState(\"\");\r\n    const [textLabel, changeTextLabel] = useState(\"Type something\")\r\n\r\n    return(\r\n        <div>\r\n             <Paper className={classes.root}>\r\n                 \r\n\r\n                <div className={classes.flex}>\r\n                    <div className={classes.topicsWindow}>\r\n                        <List>\r\n                            {topics.map(topic =>(\r\n                                <ListItem key={topic} button onClick={e=>changeActiveTopic(e.target.innerText)}>\r\n                                    {/* <ListItemIcon> */}\r\n                                        <Avatar key={topic} onClick={e=>{e.preventDefault()}} src=\"https://img.icons8.com/flat_round/64/000000/add-user-group-man-man.png\"/>\r\n                                    {/* </ListItemIcon> */}\r\n                                    <ListItemText primary={topic}></ListItemText>\r\n                                    {/* <ListItemText secondary=\"online\" align=\"right\"></ListItemText> */}\r\n                                </ListItem>\r\n                            ))}\r\n                        </List>\r\n                    </div>\r\n\r\n                    <div className={classes.chatFlex}>\r\n                        <Typography variant='h4' component='h4'>\r\n                            {activeTopic}\r\n                        </Typography>\r\n                        <div className={classes.chatWindow}>\r\n                            {allChats[activeTopic].map((chat,index) => (\r\n                                <div className={classes.flex} key={index} padding=\"20\">\r\n                                    <Avatar src=\"https://img.icons8.com/flat_round/64/000000/add-user-group-man-man.png\"/>\r\n                                    <Chip label={chat.from+\": \"+chat.msg} className={classes.chip}/>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        \r\n                        <div className={classes.chatArea}>\r\n                            <TextField \r\n                                id=\"textfield\"\r\n                                className={classes.chatBox} \r\n                                label={textLabel}\r\n                                value={textValue}\r\n                                onChange={e => changeTextValue(e.target.value)}\r\n                                onFocus={() => changeTextLabel(\"Typing...\")}\r\n                                onBlur={() => changeTextLabel(\"Type Something\")}\r\n                            />\r\n                            <Grid \r\n                                variant=\"contained\" \r\n                                className={classes.button} \r\n                                color=\"primary\" \r\n                                component=\"span\"\r\n                                onClick={()=>{\r\n                                    if(textValue===\"\"){\r\n                                        alert('Enter something.')\r\n                                    } \r\n                                    else{\r\n                                        sendChatAction({from: user, msg: textValue, topic: activeTopic})\r\n                                        changeTextValue(\"\")\r\n                                        \r\n                                    }\r\n                                }}\r\n                            >\r\n                                <Fab color=\"primary\" aria-label=\"add\"><SendIcon /></Fab>\r\n                            </Grid>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n             </Paper>\r\n        </div>\r\n    )\r\n}","import React, {useState, useContext} from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Button from '@material-ui/core/Button'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport {Context} from './DataStore'\r\n// import { render } from '@testing-library/react'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    hidden:{\r\n        display : \"none\"\r\n    },\r\n    root:{\r\n        alignContent:\"center\",\r\n        alignItems:\"center\",\r\n        margin:0,\r\n        top:\"50%\"\r\n    },\r\n    input:{\r\n        \r\n    },\r\n    button:{\r\n       \r\n    }\r\n}));\r\n\r\n\r\nexport default function Login() {\r\n    const classes = useStyles();\r\n\r\n    //Context\r\n    const {allChats, sendChatAction, user, changeUsername} = useContext(Context); \r\n\r\n    return (\r\n        <div className=\"Login\" align=\"center\" className={classes.root}>\r\n            <TextField \r\n                className={classes.chatBox} \r\n                label=\"User Name\"\r\n                value={user}\r\n                onFocus={e => changeUsername(\"\")}\r\n                onBlur={e => {\r\n                    if(e.target.value===\"\")\r\n                        changeUsername(\"Anonymous\")\r\n                }}\r\n                onChange={e => changeUsername(e.target.value)}\r\n            />\r\n            <Button \r\n                variant=\"contained\" \r\n                className={classes.button} \r\n                color=\"primary\" \r\n                component=\"span\"\r\n                onClick={()=>{\r\n                    if(user===\"\"){\r\n                        alert('Enter username');\r\n                    } \r\n                    else{\r\n                        changeUsername(user);\r\n                    }\r\n                }}\r\n            >\r\n                Chat\r\n            </Button>\r\n    </div>\r\n    );\r\n}","import React from 'react';\nimport './App.css';\nimport ChatApp from './components/ChatAppUI'\nimport DataStore from './components/DataStore'\nimport Login from './components/Login'\n\nfunction App() {\n    return (\n      <div className=\"App\">\n        <DataStore>\n          <Login />\n          <ChatApp />\n        </DataStore>\n      </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ChatUI from './reference/ChatUIReference'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <ChatUI /> */}\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}